function Minesweeper(t, n) {
    var w = this;
    var h;
    var u;
    var b;
    var l;
    var F;
    var B;
    var y;
    var A;
    var d;
    var L = new x();
    var D;
    var f;
    var a;
    var M;
    var E;
    var o;
    var j;
    var v;
    H();
    this.newGame = function () {
        var U, S;
        var R, T;
        var Q;
        R = J();
        Q = n();
        h = Q.gameTypeId;
        u = Q.numRows;
        b = Q.numCols;
        l = Q.numMines;
        F = Q.zoom;
        T = (J() != R);
        r(F);
        if (T) {
            N()
        }
        k();
        if (!T) {
            for (U = 1; U <= u; U++) {
                for (S = 1; S <= b; S++) {
                    A[U][S].setClass("square blank")
                }
            }
        }
        L.stop();
        L.reset();
        B = l;
        y = u * b - l;
        O();
        D = false;
        f = false;
        a = 0;
        M = 0;
        v = false;
        $("#face")[0].className = "facesmile"
    };
    this.resize = function (Q) {
        var R = m(Q);
        r(Q);
        $("#game-container").removeClass("z" + F * 100).addClass("z" + Q * 100);
        $("#face").css({"margin-left": Math.floor(R) + "px", "margin-right": Math.ceil(R) + "px"});
        F = Q
    };
    function r(Q) {
        $("#game-container, #game").width(Q * (b * 16 + 20));
        $("#game").height(Q * (u * 16 + 30 + 26 + 6))
    }

    function m(Q) {
        return(Q * b * 16 - 6 * Math.ceil(Q * 13) - Q * 2 * 6 - Q * 26) / 2
    }

    function J() {
        return u + "_" + b + "_" + l
    }

    function N() {
        var T, Q;
        var R = [];
        var S = m(F);
        R.push('<div class="bordertl"></div>');
        for (Q = 0; Q < b; Q++) {
            R.push('<div class="bordertb"></div>')
        }
        R.push('<div class="bordertr"></div>');
        R.push('<div class="borderlrlong"></div>', '<div class="time0" id="mines_hundreds"></div>', '<div class="time0" id="mines_tens"></div>', '<div class="time0" id="mines_ones"></div>', '<div class="facesmile" style="margin-left:', Math.floor(S), "px; margin-right: ", Math.ceil(S), 'px;" id="face"></div>', '<div class="time0" id="seconds_hundreds"></div>', '<div class="time0" id="seconds_tens"></div>', '<div class="time0" id="seconds_ones"></div>', '<div class="borderlrlong"></div>');
        R.push('<div class="borderjointl"></div>');
        for (Q = 0; Q < b; Q++) {
            R.push('<div class="bordertb"></div>')
        }
        R.push('<div class="borderjointr"></div>');
        for (T = 1; T <= u; T++) {
            R.push('<div class="borderlr"></div>');
            for (Q = 1; Q <= b; Q++) {
                R.push('<div class="square blank" id="', T, ",", Q, '"></div>')
            }
            R.push('<div class="borderlr"></div>')
        }
        R.push('<div class="borderbl"></div>');
        for (Q = 0; Q < b; Q++) {
            R.push('<div class="bordertb"></div>')
        }
        R.push('<div class="borderbr"></div>');
        for (Q = 0; Q <= b + 1; Q++) {
            R.push('<div class="square blank" style="display: none;" id="', 0, ",", Q, '"></div>')
        }
        for (Q = 0; Q <= b + 1; Q++) {
            R.push('<div class="square blank" style="display: none;" id="', u + 1, ",", Q, '"></div>')
        }
        for (T = 1; T <= u; T++) {
            R.push('<div class="square blank" style="display: none;" id="', T, ",", 0, '"></div>');
            R.push('<div class="square blank" style="display: none;" id="', T, ",", b + 1, '"></div>')
        }
        $("#game").html(R.join(""))
    }

    function q(V, R) {
        var T = 0;
        var S = false;
        var Q = false;
        var U = false;
        this.addToValue = function (W) {
            T += W
        };
        this.isMine = function () {
            return T < 0
        };
        this.isFlagged = function () {
            return S
        };
        this.isMarked = function () {
            return Q
        };
        this.isRevealed = function () {
            return U
        };
        this.isHidden = function () {
            return V < 1 || V > u || R < 1 || R > b
        };
        this.getRow = function () {
            return V
        };
        this.getCol = function () {
            return R
        };
        this.getValue = function () {
            return T
        };
        this.setRevealed = function (W) {
            U = W
        };
        this.plantMine = function () {
            T -= 10;
            A[V - 1][R - 1].addToValue(1);
            A[V - 1][R].addToValue(1);
            A[V - 1][R + 1].addToValue(1);
            A[V][R - 1].addToValue(1);
            A[V][R + 1].addToValue(1);
            A[V + 1][R - 1].addToValue(1);
            A[V + 1][R].addToValue(1);
            A[V + 1][R + 1].addToValue(1)
        };
        this.unplantMine = function () {
            T += 10;
            A[V - 1][R - 1].addToValue(-1);
            A[V - 1][R].addToValue(-1);
            A[V - 1][R + 1].addToValue(-1);
            A[V][R - 1].addToValue(-1);
            A[V][R + 1].addToValue(-1);
            A[V + 1][R - 1].addToValue(-1);
            A[V + 1][R].addToValue(-1);
            A[V + 1][R + 1].addToValue(-1)
        };
        this.setClass = function (W) {
            document.getElementById(V + "," + R).className = W
        };
        this.reveal1 = function () {
            var W, X;
            var Y, Z;
            var aa = [];
            aa.push(this);
            this.pushed = true;
            while (aa.length > 0) {
                Y = aa.pop();
                if (!Y.isRevealed() && !Y.isFlagged()) {
                    if (Y.isMine()) {
                        return false
                    } else {
                        if (!Y.isFlagged()) {
                            Y.setClass("square open" + Y.getValue());
                            Y.setRevealed(true);
                            if (Y.getValue() == 0) {
                                a++
                            } else {
                                M++
                            }
                            if (!Y.isHidden() && --y == 0) {
                                C();
                                return true
                            }
                            if (Y.getValue() == 0 && !Y.isHidden()) {
                                for (W = -1; W <= 1; W++) {
                                    for (X = -1; X <= 1; X++) {
                                        Z = A[Y.getRow() + W][Y.getCol() + X];
                                        if (!Z.pushed && !Z.isHidden() && !Z.isRevealed()) {
                                            aa.push(Z);
                                            Z.pushed = true
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return true
        };
        this.reveal9 = function () {
            if (U) {
                var X, Y;
                var Z;
                var aa = 0;
                var W = [];
                for (X = -1; X <= 1; X++) {
                    for (Y = -1; Y <= 1; Y++) {
                        Z = A[V + X][R + Y];
                        if (Z != this && Z.isFlagged()) {
                            aa++
                        }
                    }
                }
                if (aa == T) {
                    for (X = -1; X <= 1; X++) {
                        for (Y = -1; Y <= 1; Y++) {
                            Z = A[V + X][R + Y];
                            if (Z != this && !Z.reveal1()) {
                                W.push(Z)
                            }
                        }
                    }
                    if (W.length > 0) {
                        I(W)
                    }
                }
            }
        };
        this.flag = function () {
            if (!U) {
                if (S) {
                    if ($("#marks").attr("checked")) {
                        this.setClass("square question");
                        Q = true
                    } else {
                        this.setClass("square blank")
                    }
                    S = false;
                    B++;
                    O()
                } else {
                    if (Q) {
                        this.setClass("square blank");
                        Q = false
                    } else {
                        this.setClass("square bombflagged");
                        S = true;
                        B--;
                        O()
                    }
                }
            }
        }
    }

    function k() {
        var T, Q, R;
        var S;
        A = [];
        d = [];
        E = [];
        R = 0;
        for (T = 0; T <= u + 1; T++) {
            A[T] = [];
            for (Q = 0; Q <= b + 1; Q++) {
                S = new q(T, Q);
                A[T][Q] = S;
                d[T + "," + Q] = S;
                if (!S.isHidden()) {
                    E[R++] = S
                }
            }
        }
        for (R = 0; R < l; R++) {
            E.splice(Math.floor(Math.random() * E.length), 1)[0].plantMine()
        }
    }

    function p(R) {
        var Q = R.getRow();
        var S = R.getCol();
        if (R.isMine()) {
            E.splice(Math.floor(Math.random() * E.length), 1)[0].plantMine();
            R.unplantMine();
            E.push(R)
        }
        L.start();
        if ((Q == 1 && S == 1) || (Q == 1 && S == b) || (Q == u && S == 1) || (Q == u && S == b)) {
            return 1
        } else {
            if (Q == 1 || Q == u || S == 1 || S == b) {
                return 2
            } else {
                return 3
            }
        }
    }

    function P(Q) {
        if (h > 0) {
            i();
//            $.post("start.php", {key: o, s: Q, zc: a, nzc: M})
        }
    }

    function i() {
        var Q = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var R;
        o = "";
        for (var R = 0; R < 3; R++) {
            o += Q.charAt(Math.floor(Math.random() * Q.length))
        }
        o += 4 * (Math.floor(Math.random() * 225) + 25) + h;
        for (var R = 0; R < 4; R++) {
            o += Q.charAt(Math.floor(Math.random() * Q.length))
        }
    }

    function x() {
        var T = 0;
        var Q = -1;
        var S;

        function R() {
            var V = (new Date()).getTime();
            if (Q < 0) {
                S = setTimeout(R, 1000);
                Q = V + 1000
            } else {
                S = setTimeout(R, 1000 - (V - Q));
                Q += 1000
            }
            T++;
            U()
        }

        function U() {
            var V = s(T);
            document.getElementById("seconds_hundreds").className = "time" + V[0];
            document.getElementById("seconds_tens").className = "time" + V[1];
            document.getElementById("seconds_ones").className = "time" + V[2]
        }

        this.start = function () {
            R()
        };
        this.stop = function () {
            clearInterval(S);
            Q = -1
        };
        this.reset = function () {
            T = 0;
            U();
            Q = -1
        };
        this.getTime = function () {
            return T
        }
    }

    function O() {
        var Q = s(B);
        document.getElementById("mines_hundreds").className = "time" + Q[0];
        document.getElementById("mines_tens").className = "time" + Q[1];
        document.getElementById("mines_ones").className = "time" + Q[2]
    }

    function s(Q) {
        Q = Math.min(Q, 999);
        if (Q >= 0) {
            return[Math.floor(Q / 100), Math.floor((Q % 100) / 10), Q % 10]
        } else {
            return["-", Math.floor((-Q % 100) / 10), -Q % 10]
        }
    }

    function I(Q) {
        var U, R, S;
        var T;
        document.getElementById("face").className = "facedead";
        L.stop();
        D = true;
        for (U = 1; U <= u; U++) {
            columnloop:for (R = 1; R <= b; R++) {
                T = A[U][R];
                if (!T.isRevealed()) {
                    for (S = 0; S < Q.length; S++) {
                        if (T == Q[S]) {
                            T.setClass("square bombdeath");
                            continue columnloop
                        }
                    }
                    if (T.isMine() && !T.isFlagged()) {
                        T.setClass("square bombrevealed")
                    } else {
                        if (!T.isMine() && T.isFlagged()) {
                            T.setClass("square bombmisflagged")
                        }
                    }
                }
            }
        }
    }

    function C() {
        var V, Q;
        var S;
        var R;
        var T;
        var U = false;
        document.getElementById("face").className = "facewin";
        L.stop();
        D = true;
        B = 0;
        O();
        for (V = 1; V <= u; V++) {
            for (Q = 1; Q <= b; Q++) {
                S = A[V][Q];
                if (!S.isRevealed() && !S.isFlagged()) {
                    S.setClass("square bombflagged")
                }
            }
        }
        if (h > 0) {
            T = L.getTime();
            for (R = 3; R >= 0; R--) {
                if (T <= t[R][h - 1]) {
                    z(R + 1, true);
                    U = true;
                    break
                }
            }
            if (!U && ((h == 1 && T <= 100) || (h == 2 && T <= 50) || (h == 3 && T <= 150))) {
                z(1, false)
            }
        }
    }

    function z(T, W) {
        var Q;
        var R, U;
        var S = (new Date()).getTime();
        var V;
        switch (T) {
            case 1:
                Q = "daily";
                break;
            case 2:
                Q = "weekly";
                break;
            case 3:
                Q = "monthly";
                break;
            case 4:
                Q = "all-time";
                break;
            default:
                Q = "";
                break
        }
        U = (G() && !!localStorage.name) ? localStorage.name : "";
        if (W) {
            R = prompt("New " + Q + " high score! Please enter your name", U)
        } else {
            R = prompt("Please enter your name to submit your score", U)
        }
        R = $.trim(R);
        if (R.length > 25) {
            R.substring(0, 25)
        }
        if (G()) {
            localStorage.name = R
        }
        V = Math.round(((new Date()).getTime() - S) / 1000);
        $.post("win.php", {key: o, name: R, time: L.getTime(), s: V, i: T, h: W ? 1 : 0}, function (X) {
            if (W) {
                window.location.reload()
            }
        })
    }

    function G() {
        try {
            return"localStorage" in window && window.localStorage !== null
        } catch (Q) {
            return false
        }
    }

    function K(Q) {
        return Q.className.substring(0, 6) == "square"
    }

    function e(R) {
        var Q = {};
        if (j) {
            Q.left = R.button == 1 || R.button == 3 || R.button == 4;
            Q.right = R.button == 2 || R.button == 3 || R.button == 4
        } else {
            Q.left = R.button == 0 || R.button == 1;
            Q.right = R.button == 2 || R.button == 1
        }
        return Q
    }

    function g(S, R, Q) {
        if (!S.isRevealed()) {
            if (S.isMarked()) {
                S.setClass(Q)
            } else {
                if (!S.isFlagged()) {
                    S.setClass(R)
                }
            }
        }
    }

    function c(U, T, S) {
        var Q, R;
        for (Q = -1; Q <= 1; Q++) {
            for (R = -1; R <= 1; R++) {
                g(A[U.getRow() + Q][U.getCol() + R], T, S)
            }
        }
    }

    function H() {
        var V = false;
        var U = false;
        var S = false;
        var T;

        function R(W) {
            if (W.target != T && !v) {
                if (U) {
                    if (T) {
                        c(d[T.id], "square blank", "square question")
                    }
                    if (K(W.target)) {
                        c(d[W.target.id], "square open0", "square questionpressed")
                    }
                } else {
                    if (T) {
                        g(d[T.id], "square blank", "square question")
                    }
                    if (K(W.target)) {
                        g(d[W.target.id], "square open0", "square questionpressed")
                    }
                }
            }
            T = (K(W.target)) ? W.target : undefined
        }

        function Q(W) {
            document.getElementById("face").className = (W.target.id == "face") ? "facepressed" : "facesmile"
        }

//        j = $.browser.msie && parseFloat($.browser.version) <= 7;
        $(document).mousedown(function (X) {
            var W = e(X);
            V = W.left || V;
            U = W.right || U;
            if (V) {
                if (K(X.target) && !D) {
                    X.preventDefault();
                    $(document).bind("mousemove", R);
                    document.getElementById("face").className = "faceooh";
                    T = undefined;
                    R(X)
                } else {
                    if (X.target.id == "face") {
                        X.preventDefault();
                        S = true;
                        $(document).bind("mousemove", Q);
                        document.getElementById("face").className = "facepressed"
                    }
                }
            } else {
                if (U) {
                    if (K(X.target) && !D) {
                        d[X.target.id].flag()
                    }
                    return false
                }
            }
        });
        $(document).mouseup(function (Z) {
            var W = e(Z);
            var Y;
            var X;
            if (W.left) {
                V = false;
                $(document).unbind("mousemove", R).unbind("mousemove", Q);
                if (S || !D) {
                    document.getElementById("face").className = "facesmile"
                }
                if (K(Z.target) && !D) {
                    Y = d[Z.target.id];
                    if (U) {
                        v = true;
                        c(d[Z.target.id], "square blank", "square question");
                        Y.reveal9()
                    } else {
                        if (!v) {
                            if (!f) {
                                X = p(Y)
                            }
                            if (!Y.reveal1()) {
                                I([Y])
                            }
                            if (!f) {
                                P(X);
                                f = true
                            }
                        }
                        v = false
                    }
                } else {
                    if (Z.target.id == "face" && S) {
                        w.newGame()
                    }
                }
                S = false
            }
            if (W.right) {
                U = false;
                if (K(Z.target) && !D) {
                    if (V) {
                        Y = d[Z.target.id];
                        v = true;
                        c(Y, "square blank", "square question");
                        Y.reveal9()
                    } else {
                        v = false
                    }
                    if (!D) {
                        document.getElementById("face").className = "facesmile"
                    }
                }
            }
        });
        $(document).keydown(function (W) {
            if (W.keyCode == 113) {
                w.newGame()
            }
        })
    }
};






$(function () {
    var gameType = 'expert';
    var zoom = '100';
    var position = 'center';
    var hashParts, i;
    var minesweeper;

    if (!!location.hash && location.hash.length > 1) {
        hashParts = location.hash.substring(1).split('-');

        for (i = 0; i < hashParts.length; i++) {
            switch (hashParts[i]) {
                case 'beginner':
                    gameType = 'beginner';
                    break;
                case 'intermediate':
                    gameType = 'intermediate';
                    break;
                case '150':
                    zoom = '150';
                    break;
                case '200':
                    zoom = '200';
                    break;
                case 'center':
                    position = 'center';
                    break;
            }
        }
    }

    $('#' + gameType).attr('checked', true);
    $('#zoom' + zoom).attr('checked', true);
    $('#position-' + position).attr('checked', true);

    document.getElementById('game-container').className = 'z' + zoom;
    setPosition(position);

    minesweeper = new Minesweeper([
        [ 5, 27, 72],
        [ 3, 24, 66],
        [ 2, 21, 64],
        [ 1, 18, 61]
    ], readOptions);
    minesweeper.newGame();
//    setHash();

    $("#options-link, #options-close").click(function () {
        $("#display").hide();
        $("#options").toggle();
        return false;
    });

    $("#options-form").submit(function () {
        $("#options").hide();
        minesweeper.newGame();
//        setHash();
        return false;
    });

    $("#display-link, #display-close").click(function () {
        $("#options").hide();
        $("#display").toggle();
        return false;
    });

    $('input[name="zoom"]').change(function () {
        var zoom = parseFloat($(this).val());
        minesweeper.resize(zoom);
//        setHash();
    });

    $('input[name="position"]').change(function () {
        setPosition($(this).val());
//        setHash();
    });

    $(document).keydown(function (e) {
        if (e.keyCode == 27) { //escape
            $("#options, #display").hide();
        }
    });

    $(".scores-tab").click(function () {
        var id = this.id;
        $(".scores-tab-selected").removeClass("scores-tab-selected");
        $(this).addClass("scores-tab-selected");
        $(".scores-pane").hide();
        $("#" + id.substring(0, id.length - 5)).show();
    });

    function setPosition(position) {
        if (position == 'left') {
            $('.outer-container').css({ 'vertical-align': 'top', 'text-align': 'left' });
        }
        else if (position == 'center') {
            $('.outer-container').css({ 'vertical-align': 'middle', 'text-align': 'center' });
        }
    }

    function readOptions() {
        var gameTypeId;
        var numRows;
        var numCols;
        var numMines;
        var zoom;

        if ($("#beginner").attr("checked")) {
            gameTypeId = 1;
            numRows = 9;
            numCols = 9;
            numMines = 10;
        }
        else if ($("#intermediate").attr("checked")) {
            gameTypeId = 2;
            numRows = 16;
            numCols = 16;
            numMines = 40;
        }
        else if ($("#expert").attr("checked")) {
            gameTypeId = 3;
            numRows = 16;
            numCols = 30;
            numMines = 99;
        }
        else if ($("#custom").attr("checked")) {
            gameTypeId = 0;

            numRows = parseInt($("#custom_height").val(), 10);
            if (isNaN(numRows)) {
                numRows = 20;
            }
            numRows = Math.max(1, numRows);
            numRows = Math.min(99, numRows);
            $("#custom_height").val(numRows);

            numCols = parseInt($("#custom_width").val(), 10);
            if (isNaN(numCols)) {
                numCols = 30;
            }
            numCols = Math.max(8, numCols);
            numCols = Math.min(99, numCols);
            $("#custom_width").val(numCols);

            numMines = parseInt($("#custom_mines").val(), 10);
            if (isNaN(numMines)) {
                numMines = Math.round(numRows * numCols / 5);
            }
            numMines = Math.max(0, numMines);
            numMines = Math.min(numRows * numCols - 1, numMines);
            $("#custom_mines").val(numMines);
        }

        zoom = parseFloat($('input[name="zoom"]:checked').val());

        return {
            gameTypeId: gameTypeId,
            numRows: numRows,
            numCols: numCols,
            numMines: numMines,
            zoom: zoom
        };
    }

//    function setHash() {
//        var gameType = 'expert';
//        var zoom = $('input[name="zoom"]:checked').val();
//        var position = $('input[name="position"]:checked').val();
//        var hashParts = [];
//
//        if ($("#beginner").attr("checked")) {
//            hashParts.push("beginner");
//        }
//        else if ($("#intermediate").attr("checked")) {
//            hashParts.push("intermediate");
//        }
//        if (zoom != 1) {
//            hashParts.push(zoom * 100);
//        }
//        if (position != "left") {
//            hashParts.push(position);
//        }
//    }
});